@main.0 = constant [3 x i32] [i32 3, i32 2, i32 4]
@str.0 = constant [7 x i8] c"%d-%d\0A\00"

declare void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)

declare i32 @printf(i8*, ...)

define void @main() {
; <label>:0
	%1 = alloca i32*
	%2 = alloca [3 x i32]
	%3 = getelementptr [3 x i32], [3 x i32]* %2, i64 0, i64 0
	store i32* %3, i32** %1
	%4 = alloca { i32, i32, i32, i32 }
	%5 = getelementptr { i32, i32, i32, i32 }, { i32, i32, i32, i32 }* %4, i32 0, i32 0
	%6 = getelementptr { i32, i32, i32, i32 }, { i32, i32, i32, i32 }* %4, i32 0, i32 1
	%7 = getelementptr { i32, i32, i32, i32 }, { i32, i32, i32, i32 }* %4, i32 0, i32 2
	store i32 3, i32* %5
	store i32 3, i32* %6
	store i32 0, i32* %7
	%8 = load i32*, i32** %1
	%9 = bitcast i32* %8 to i8*
	%10 = bitcast [3 x i32]* @main.0 to i8*
	call void @llvm.memcpy.p0i8.p0i8.i32(i8* %9, i8* %10, i32 12, i1 false)
	%11 = load i32*, i32** %1
	%12 = getelementptr i32, i32* %11, i32 2
	store i32 89, i32* %12
	%13 = load i32*, i32** %1
	%14 = getelementptr i32, i32* %13, i32 2
	%15 = load i32, i32* %14
	%16 = load { i32, i32, i32, i32 }, { i32, i32, i32, i32 }* %4
	%17 = extractvalue { i32, i32, i32, i32 } %16, 0
	%18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.0, i64 0, i64 0), i32 %15, i32 %17)
	ret void
}
