@tt = global i32 90
@str.0 = constant [10 x i8] c"%d-%d=%d\0A\00"

define i32 @add(i32 %a, i32 %b) {
; <label>:0
	%1 = alloca i32
	store i32 %a, i32* %1
	%2 = alloca i32
	store i32 %b, i32* %2
	%3 = load i32, i32* %1
	%4 = load i32, i32* %2
	%5 = add i32 %3, %4
	ret i32 %5
}

declare i32 @printf(i8*, ...)

define void @main() {
; <label>:0
	%1 = alloca i32
	store i32 4, i32* %1
	%2 = alloca i32
	store i32 3, i32* %2
	%3 = load i32, i32* %1
	%4 = load i32, i32* %2
	%5 = load i32, i32* @tt
	%6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str.0, i64 0, i64 0), i32 %3, i32 %4, i32 %5)
	ret void
}

define i1 @varBool() {
; <label>:0
	%1 = alloca i32
	store i32 90, i32* %1
	%2 = alloca i32
	store i32 78, i32* %2
	%3 = alloca i32
	store i32 12, i32* %3
	%4 = load i32, i32* %1
	%5 = icmp sgt i32 %4, 1
	ret i1 %5

; <label>:6
	%7 = load i32, i32* %2
	%8 = icmp sgt i32 %7, 50
	ret void

; <label>:9
	%10 = load i32, i32* %3
	%11 = icmp slt i32 %10, 50
	ret void
}

define void @varBool1() {
; <label>:0
	%1 = alloca i8
	store i8 1, i8* %1
	ret void
}

define void @varBool2() {
; <label>:0
	%1 = alloca i8
	store i8 1, i8* %1
	ret void
}
