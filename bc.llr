%Person = type { i8*, i8*, i32 }

@str.0 = constant [5 x i8] c"wang\00"
@str.1 = constant [4 x i8] c"man\00"
@Person.2 = constant %Person { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.0, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.1, i64 0, i64 0), i32 12 }
@str.2 = constant [4 x i8] c"%s\0A\00"
@str.3 = constant [4 x i8] c"%d\0A\00"

declare void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i1)

declare i32 @printf(i8*, ...)

define void @show(i32 %a) {
; <label>:0
	%1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.3, i64 0, i64 0), i32 %a)
	ret void
}

define void @main() {
; <label>:0
	%1 = alloca %Person
	%2 = bitcast %Person* %1 to i8*
	%3 = bitcast %Person* @Person.2 to i8*
	call void @llvm.memcpy.p0i8.p0i8.i32(i8* %2, i8* %3, i32 20, i1 false)
	%4 = getelementptr %Person, %Person* %1, i32 0, i32 0
	%5 = load i8*, i8** %4
	%6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.2, i64 0, i64 0), i8* %5)
	%7 = getelementptr %Person, %Person* %1, i32 0, i32 2
	%8 = load i32, i32* %7
	call void @show(i32 %8)
	ret void
}
